//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ArticleCollectionViewCell`.
    static let articleCollectionViewCell = _R.nib._ArticleCollectionViewCell()
    
    /// `UINib(name: "ArticleCollectionViewCell", in: bundle)`
    static func articleCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.articleCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewsStoryboard`.
    static let newsStoryboard = _R.storyboard.newsStoryboard()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "NewsStoryboard", bundle: ...)`
    static func newsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsStoryboard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// Base translation: Articles
      /// 
      /// Locales: Base
      static let fEED_NAVIGATION_BAR_TITLE = Rswift.StringResource(key: "FEED_NAVIGATION_BAR_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Author
      /// 
      /// Locales: Base
      static let aLERT_AUTHOR_OPTION = Rswift.StringResource(key: "ALERT_AUTHOR_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static let aLERT_CANCEL_OPTION = Rswift.StringResource(key: "ALERT_CANCEL_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Date
      /// 
      /// Locales: Base
      static let aLERT_DATE_OPTION = Rswift.StringResource(key: "ALERT_DATE_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sort
      /// 
      /// Locales: Base
      static let bUTTON_SORT_TITLE = Rswift.StringResource(key: "BUTTON_SORT_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sort by
      /// 
      /// Locales: Base
      static let aLERT_SORT_BY_TITLE = Rswift.StringResource(key: "ALERT_SORT_BY_TITLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Title
      /// 
      /// Locales: Base
      static let aLERT_TITLE_OPTION = Rswift.StringResource(key: "ALERT_TITLE_OPTION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Articles
      /// 
      /// Locales: Base
      static func fEED_NAVIGATION_BAR_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("FEED_NAVIGATION_BAR_TITLE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Author
      /// 
      /// Locales: Base
      static func aLERT_AUTHOR_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_AUTHOR_OPTION", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base
      static func aLERT_CANCEL_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_CANCEL_OPTION", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Date
      /// 
      /// Locales: Base
      static func aLERT_DATE_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_DATE_OPTION", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sort
      /// 
      /// Locales: Base
      static func bUTTON_SORT_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("BUTTON_SORT_TITLE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Sort by
      /// 
      /// Locales: Base
      static func aLERT_SORT_BY_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_SORT_BY_TITLE", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Title
      /// 
      /// Locales: Base
      static func aLERT_TITLE_OPTION(_: Void = ()) -> String {
        return NSLocalizedString("ALERT_TITLE_OPTION", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ArticleCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ArticleCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ArticleCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ArticleCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try newsStoryboard.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct newsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewsViewController
      
      let bundle = R.hostingBundle
      let name = "NewsStoryboard"
      let newsViewController = StoryboardViewControllerResource<NewsViewController>(identifier: "NewsViewController")
      
      func newsViewController(_: Void = ()) -> NewsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.newsStoryboard().newsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsViewController' could not be loaded from storyboard 'NewsStoryboard' as 'NewsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}